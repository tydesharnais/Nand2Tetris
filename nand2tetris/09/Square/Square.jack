// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/Square.jack

/** Author Ty Desharnais */

/** Implements a graphical square. */

class Square {

   field int x, y; // screen location of the square's top-left corner
   field int size; // length of this square, in pixels

   /** DESCRIPTION:  Constructs a new square with a given location and size. */
   /** PRECONDITION: Takes x and y axis size and size of the square */
   /** POSTCONDITION: Constructs and draws a new square and screen  */
   
   constructor Square new(int Ax, int Ay, int Asize) {
      let x = Ax;
      let y = Ay;
      let size = Asize;
      do draw();
      return this;
   }

   // DESCRIPTION: Dispose the square 
   // PRECONDITION: No precondition 
   // POSTCONDITION: Removes the current square from memory 
   
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   // DESCRIPTION: Draws the square on the screen
   // PRECONDITION: no precondition. Called method with no parameters
   // POSTCONDITION: draws square accordingly on the screen 
   
   method void draw() {
      do Screen.setColor(true);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

   // DESCRIPTION: Erases the square from the screen 
   // PRECONDITION: no precondition. Called method with no parameters
   // POSTCONDITION: color is set to false and is now non-visable to the screen
  
   method void erase() {
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

   // DESCRIPTION: Increments the square size by two pixels
   // PRECONDITION: no precondition. Called method with no parameters 
   // POSTCONDITION: As long as the screen size and square is within the parameters, draws a square by an increase of two pixels

   method void incSize() {
      if (((y + size) < 254) & ((x + size) < 510)) {
         do erase();
         let size = size + 2;
         do draw();
      }
      return;
   }

   // DESCRIPTION: Decrements the square size by two pixels
   // PRECONDITION: no precondition. Called method with no parameters 
   // POSTCONDITION: As long as the screen size and square is within the parameters, draws a square by a decrease of 2 pixels

   method void decSize() {
      if (size > 2) {
         do erase();
         let size = size - 2;
         do draw();
      }
      return;
   }

   // DESCRIPTION: Moves square up by 2 pixels 
   // PRECONDITION: no precondition. Called method with no parameters 
   // POSTCONDITION: Draws square in new location
  
   method void moveUp() {
      if (y > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
         let y = y - 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + size, y + 1);
      }
      return;
   }


   // DESCRIPTION: Moves square down by 2 pixels 
   // PRECONDITION: no precondition. Called method with no parameters 
   // POSTCONDITION: Draws square in new location by setting the screen view to false and resolving back to true when square is moved 

   method void moveDown() {
      if ((y + size) < 254) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + size, y + 1);
         let y = y + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
      }
      return;
   }


   // DESCRIPTION: Moves square left by 2 pixels 
   // PRECONDITION: no precondition. Called method with no parameters 
   // POSTCONDITION: Draws square in new location by setting the screen view to false and resolving back to true when square is moved    
 
   method void moveLeft() {
      if (x > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
         let x = x - 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + 1, y + size);
      }
      return;
   }


   // DESCRIPTION: Moves square right by 2 pixels 
   // PRECONDITION: no precondition. Called method with no parameters 
   // POSTCONDITION: Draws square in new location by setting the screen view to false and resolving back to true when square is moved 
  
   method void moveRight() {
      if ((x + size) < 510) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + 1, y + size);
         let x = x + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
      }
      return;
   }
}
